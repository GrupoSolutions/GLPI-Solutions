{#
 # ---------------------------------------------------------------------
 # Formcreator is a plugin which allows creation of custom forms of
 # easy access.
 # ---------------------------------------------------------------------
 # LICENSE
 #
 # This file is part of Formcreator.
 #
 # Formcreator is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # Formcreator is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Formcreator. If not, see <http://www.gnu.org/licenses/>.
 # ---------------------------------------------------------------------
 # @copyright Copyright © 2011 - 2021 Teclib'
 # @license   http://www.gnu.org/licenses/gpl.txt GPLv3+
 # @link      https://github.com/pluginsGLPI/formcreator/
 # @link      https://pluginsglpi.github.io/formcreator/
 # @link      http://plugins.glpi-project.org/#/plugin/formcreator
 # ---------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}
<script src='/assets/css/fa6.js' crossorigin='anonymous'></script>;
<style>
	{% set widthPercent = 100 / options.columns %}
	{% for i in range(1, options.columns ) %}
		{% set width = i * widthPercent %}
            #plugin_formcreator_form.plugin_formcreator_form [data-itemtype = "PluginFormcreatorQuestion"][gs-w="{{ i }}"],
            #plugin_formcreator_form.plugin_formcreator_form .plugin_formcreator_gap[gs-w="{{ i }}"] {
                min-width: {{ widthPercent }}%;
                width: {{ width }}%;
                margin-left: -0.25em;
            }
	{% endfor %}
    .texto{
        width:100%;
        font-size:18px;
        font-weight:500;
    }
    .texto span{
        font-weight:300;
    }
    .ende {
        text-align:initial;
        font-size:18px;
        width:100%;
    }
    .ende label {
        
        font-weight:500;
    }
</style>

<div class="asset">
    {% set formName = 'plugin_formcreator_form' %}
	<form name="{{ formName }}" method="post" role="form" enctype="multipart/form-data" class="plugin_formcreator_form" onsubmit="return plugin_formcreator.submitUserForm(event)" onkeypress="return plugin_formcreator.submitUserFormByKeyPress(event);" id="plugin_formcreator_form" data-itemtype="PluginFormcreatorForm" data-id="{{ item.fields['id'] }}" data-submit-once="true">
		<h1 class='form-title'>
		        {{ call('Glpi\\Toolbox\\Sanitizer::unsanitize', [__(item.fields['name'], options.domain)]) }}
			<i class="fas fa-print" style="cursor: pointer;" onclick="window.print();"></i>
		</h1>
        {% if item.fields['content'] != '' or item.getExtraHeader() != "" %}
            <div class="form_header">
            {{ __(item.fields['content'], options.domain)|safe_html }}
            {{ item.getExtraHeader()|safe_html }}
            </div>
        {% endif %}
        <ol>
        {% set sections = call('PluginFormcreatorSection::getSectionsFromForm', [
            item.fields['id']
        ]) %}
        {% for section in sections %}
            {% set sectionId = section.fields['id'] %}
            <li class="card plugin_formcreator_section" data-itemtype="PluginFormcreatorSection" data-id={{ sectionId }}>
                <div class="card-header">
                    <h2 class="card-title">
                        {% if section.fields['name'] == '' %}
                            ({{ sectionId }})
                        {% else %}
                            {{ call('Glpi\\Toolbox\\Sanitizer::unsanitize', [__(section.fields['name'], options.domain)]) }}
                        {% endif %}
                    </h2>
                </div>
                <div class="card-body">
                    {% set lastQuestion = null %}
                    {% set questions = call('PluginFormcreatorQuestion::getQuestionsFromSection', [
                        sectionId
                    ]) %}
                    {% for question in questions %}
                        {% if not (lastQuestion is null) %}
                            {% if lastQuestion.fields['row'] < question.fields['row'] %}
                                <div class="plugin_formcreator_newRow"></div>
                                {% if question.fields['col'] > 0 %}
                                    {# There is a gap before the question #}
                                    {% set x = 0 %}
                                    {% set width = question.fields['col'] %}
                                    <div class="plugin_formcreator_gap" gs-x="{{ x }}" gs-w="{{ width }}"></div>
                                {% endif %}
                            {% else %}
                                {% set x = lastQuestion.fields['col'] + lastQuestion.fields['width'] %}
                                {% set width = question.fields['col'] - x %}
                                {% if x < question.fields['col'] %}
                                    {# There is a gap before the question #}
                                    <div class="plugin_formcreator_gap" gs-x="{{ x }}" gs-w="{{ width }}"></div>
                                {% endif %}
                            {% endif %}
                        {% endif %}
                        {% if not options.public or question.getSubField().isPublicFormCompatible() %}
                            {% set sessionData = session('formcreator') %}
                            {{ question.getRenderedHtml(options.domain, true, options.formanswer)|raw }}
                        {% endif %}
                        {% set lastQuestion = question %}
                    {% endfor %}
                </div>
            </li>
        {% endfor %}
        {% if options.use_captcha %}
            {% set captchaTime = call('time') %}
            {% set catchaId = call('md5', [captchaTime ~ item.fields['id']]) %}
            {% set captcha = call('PluginFormcreatorCommon::getCaptcha', [captchaId]) %}
            <li class="plugin_formcreator_section" id="plugin_formcreator_captcha_section">
                <div class="card-header">{{ __('Are you a robot ?', 'formcreator') }}</div>
                <div class="card-body"><label for="plugin_formcreator_captcha">{{ __('Are you a robot ?', 'formcreator') }}</label>
                    <div><i onclick="plugin_formcreator_refreshCaptcha()" class="fas fa-sync-alt"></i>&nbsp;<img src="{{ captcha['img']|raw }}">
                        <div style="width: 50%; float: right" class="form_field"><span class="no-wrap">
                        {{ fields.textField('plugin_formcreator_captcha', '', '', { 'no_label': true}) }}
                        {{ fields.hiddenField('plugin_formcreator_captcha_id', captchaId) }}
                        </div>
                    </div>
                </div>
            </li>
        {% endif %}
        </ol>
        <script>
           $(
              function() {
                 plugin_formcreator.showFields($("form[name='{{ formName }}']"));
              }
           )
        </script>

        {{ call('PluginFormcreatorForm_Validator::dropdownValidator', [
              item
        ])|raw }}

        <div class="center">
          {# {{ call('Html::submit', [
              __('Send'),
              {'name': 'add'}
          ])|raw }} #}
        <button type='button' id="btnEnvia" onclick="atualizaEnd()" value='Enviar' name="submit_formcreator" class="btn"> <span>Enviar</span> </button>&nbsp;

        </div>
        {{ fields.hiddenField('plugin_formcreator_forms_id', item.fields['id']) }}
        <input type="hidden" name="_glpi_csrf_token" value="{{ csrf_token() }}" />
	</form>
 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
    <script>

    //Função que limpa o forumlário(retirada do site viacep)
    function limpa_formulário_cep() {
            //Limpa valores do formulário de cep.
            document.getElementById('endereco').value=("");
            document.getElementById('bairro').value=("");
            document.getElementById('cidade').value=("");
            document.getElementById('estado').value=("");
    }

    //Função que preenche o retorno da api (retirada do site viacep)
    function meu_callback(conteudo) {
        if (!("erro" in conteudo)) {
            //Atualiza os campos com os valores.
            document.getElementById('endereco').value=(conteudo.logradouro);
            document.getElementById('bairro').value=(conteudo.bairro);
            document.getElementById('cidade').value=(conteudo.localidade);
            document.getElementById('estado').value=(conteudo.uf);
        } //end if.
        else {
            //CEP não Encontrado.
            limpa_formulário_cep();
            alert("CEP não encontrado.");
        }
    }

    //Função que efetua a busca do conteudo na api (retirada do site viacep)
    function pesquisacep(valor) {

        //Nova variável "cep" somente com dígitos.
        var cep = valor.replace(/\D/g, '');

        //Verifica se campo cep possui valor informado.
        if (cep != "") {

            //Expressão regular para validar o CEP.
            var validacep = /^[0-9]{8}$/;

            //Valida o formato do CEP.
            if(validacep.test(cep)) {

                //Preenche os campos com "..." enquanto consulta webservice.
                document.getElementById('endereco').value="...";
                document.getElementById('bairro').value="...";
                document.getElementById('cidade').value="...";
                document.getElementById('estado').value="...";

                //Cria um elemento javascript.
                var script = document.createElement('script');

                //Sincroniza com o callback.
                script.src = 'https://viacep.com.br/ws/'+ cep + '/json/?callback=meu_callback';

                //Insere script no documento e carrega o conteúdo.
                document.body.appendChild(script);

            } //end if.
            else {
                //cep é inválido.
                limpa_formulário_cep();
                alert("Formato de CEP inválido.");
            }
        } //end if.
        else {
            //cep sem valor, limpa formulário.
            limpa_formulário_cep();
        }
    };
    
    //Esta função tem como objetivo remover o texto do botão e inserir o icone do fontawesome (carregando)...
    function substituirPorItalico() {
        const botao = document.getElementById('btnEnvia');
        const span = botao.querySelector('span');

        // Verifica se existe um elemento <span> dentro do botão
        if (span) {
            // Cria um novo elemento <i> com as classes especificadas
            const novoItalico = document.createElement('i');
            novoItalico.classList.add('fa-duotone', 'fa-spinner-third', 'fa-spin');

            // Substitui o texto do botão pelo novo elemento <i>
            botao.innerHTML = '';
            botao.appendChild(novoItalico);

            // Desabilita o botão para que não possa ser clicado novamente
            botao.disabled = true;
        }
    }

    function desfazerAlteracao() {
        const botao = document.getElementById('btnEnvia');

        // Remove o elemento <i>
        botao.removeChild(botao.querySelector('i'));

        // Cria um novo elemento <span> com o texto original "Enviar"
        const span = document.createElement('span');
        span.textContent = 'Enviar';

        // Adiciona o novo elemento <span> ao botão
        botao.appendChild(span);

        // Habilita novamente o botão para que possa ser clicado
        botao.disabled = false;
    }
    //Esta função tem como objetivo não permitir o input de caracteres não numéricos no input
    function validarNumero(input) {
        // Remove caracteres não numéricos do valor do input
        input.value = input.value.replace(/\D/g, '');
    }

    //Esta função verifica se o array contem campos nulos, indefinidos ou vazios
    function hasEmptyFields(arr) {
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === '' || arr[i] === null || arr[i] === undefined) {
            return true;
            }
        }
        return false;
    }

    //Esta função efetua o envio dos dados obtidos no sweetAlert de correção de endereço
    function enviaEndereco(dados){
        // Construa os dados que serão enviados ao PHP
        const formData = new FormData();
        formData.append('idf', dados[0]);
        formData.append('cep', dados[1]);
        formData.append('rua', dados[2]);
        formData.append('bairro', dados[3]);
        formData.append('cidade', dados[4]);
        formData.append('estado', dados[5]);
        formData.append('numero', dados[6]);
        formData.append('complemento', dados[7]);
        // Adicione mais campos, se necessário.

        // Use a função fetch para enviar a requisição POST para o arquivo PHP
        fetch('/marketplace/formcreator/ajax/enviaEndereco.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            // Manipule a resposta do servidor aqui, se necessário.
            Swal.fire(
                'Sucesso',
                'Endereço atualizado!',
                'success'
            )
        })
        .catch(error => {
            Swal.fire(
                'Falha!',
                'Erro ao atualizar endereço ' + error,
                'error'
            )
        }); 
    }

    const btnEnvia = document.getElementById("enviaSolicitacao");
    //Esta função deverá fazer uma requisição ajax, enviando o id do usuario que está fazendo a solicitação,
    //Buscar na tabela de usuarios o id da localização e em seguida os campos de endereço do usuário, e printará no sweetalert para confirmação ou correção.
    function atualizaEnd(){
        substituirPorItalico();
        fetch('/glpi/marketplace/formcreator/ajax/buscaEndereco.php?id=' + {{ idSolicitante}})
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    title: '<strong>Verifique seu endereço</strong>',
                    icon: 'question',
                    html:
                        '<label class="texto">CEP: <span>' + data[3] + '</span></label><br>' +
                        '<label class="texto">Endereço: <span>' + data[1] + '</span></label><br>' +
                        '<label class="texto">Bairro: <span>' + data[2] + '</span></label><br>' +
                        '<label class="texto">Cidade: <span>' + data[4] + '</span></label><br>' +
                        '<label class="texto">Estado: <span>' + data[5] + '</span></label><br>' +
                        '<label class="texto">Número: <span>' + data[6] + '</span></label><br>' +
                        '<label class="texto">Complemento: <span>' + data[7] + '</span></label><br>',
                    allowOutsideClick: false,
                    showCloseButton: false,
                    allowEscapeKey: false,
                    showCancelButton: true,
                    focusConfirm: false,
                    confirmButtonText:
                        '<i class="fa fa-thumbs-up"></i> Está Correto!',
                    confirmButtonAriaLabel: 'Thumbs up, great!',
                    cancelButtonText:
                        '<i class="fa fa-thumbs-down"></i> Corrigir',
                    cancelButtonAriaLabel: 'Thumbs down'
                }).then((result) => {
                        if(result.isDismissed){
                            const { value: formValues } = Swal.fire({
                            title: 'Editar endereço',
                            html:
                                '<label for="cep" class="ende">CEP</label><br><input id="cep" oninput="validarNumero(this);" onblur="pesquisacep(this.value);" required value="' + data[3] + '" class="ende">' +
                                '<label for="endereco" class="ende">Endereço</label><br><input id="endereco" class="ende" required value="' + data[1] + '">' + 
                                '<label for="bairro" class="ende">Bairro</label><br><input id="bairro" class="ende" required value="' + data[2] + '">' +
                                '<label for="cidade" class="ende">Cidade</label><br><input id="cidade" class="ende" required value="' + data[4] + '">' +
                                '<label for="estado" class="ende">Estado</label><br><input id="estado" class="ende" required value="' + data[5] + '">' +
                                '<label for="num" class="ende">Número</label><br><input id="num" class="ende" required value="' + data[6] + '">' +
                                '<label for="comp" class="ende">Complemento</label><br><input id="comp" class="ende" value="' + data[7] + '">',
                            focusConfirm: false,
                            allowOutsideClick: false,
                            showCloseButton: true,
                            allowEscapeKey: false,
                            preConfirm: () => {
                                var idUsu = {{idSolicitante}};
                                var cep = document.getElementById('cep').value;
                                var endereco = document.getElementById('endereco').value;
                                var bairro = document.getElementById('bairro').value;
                                var cidade = document.getElementById('cidade').value;
                                var estado = document.getElementById('estado').value;
                                var num = document.getElementById('num').value;
                                var comp = document.getElementById('comp').value;
                                
                                dados = [cep, endereco, bairro, cidade, estado, num];
                                retorno = [idUsu, cep, endereco, bairro, cidade, estado, num, comp];

                                if(hasEmptyFields(dados)){
                                    Swal.fire(
                                        'Falha!',
                                        'Informe corretamente os dados, tente novamente!',
                                        'error'
                                    );
                                    desfazerAlteracao();
                                } else{
                                    enviaEndereco(retorno);
                                    plugin_formcreator.submitUserForm();
                                    Swal.fire(
                                        'Sucesso',
                                        'Solicitação enviada',
                                        'success'
                                    );
                                    window.location.href = "/";
                                }
                            }
                            })
                        } else {
                            plugin_formcreator.submitUserForm();
                            Swal.fire(
                                'Sucesso',
                                'Solicitação enviada',
                                'success'
                            );
                            window.location.href = "/";
                        }
                })
            })
            .catch(error => {
                Swal.fire(
                    'Falha!',
                    'Erro na requisição AJAX: ' + error,
                    'error'
                );
                desfazerAlteracao()
            });
    }
    </script>
</div>
